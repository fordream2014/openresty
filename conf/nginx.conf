#user  nobody;
worker_processes  1;

#error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

#pid        logs/nginx.pid;


events {
    worker_connections  1024;
}


http {
    include       mime.types;
    default_type  application/octet-stream;

    log_format  main  '$remote_addr - $remote_user [$time_local - $msec] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    access_log  logs/access.log  main;

    sendfile        on;
    #tcp_nopush     on;

    #keepalive_timeout  0;
    keepalive_timeout  65;

    #gzip  on;

    lua_shared_dict my_limit_req_store 10m;
    lua_shared_dict my_limit_conn_store 10m;
    lua_shared_dict my_cache_config 10m;
    lua_package_path  "/usr/local/openresty/nginx/lualib/?.lua;/usr/local/openresty/lualib/?.lua;;";
    init_by_lua_file /data/www/openresty/lualib/abtest/init.lua;

    server {
        listen       80;
        server_name  localhost;
		default_type text/plain;

		lua_code_cache off;

        #charset koi8-r;

        #access_log  logs/host.access.log  main;

        location / {
            root   html;
            index  index.html index.htm;
        }

        location /hello/v0 {
            internal;
            content_by_lua_block {
                ngx.say("hello, v0")
            }
        }
        location /hello/v1 {
            internal;
            content_by_lua_block {
                ngx.say("hello, v1")
            }
        }
        location /hello/v2 {
            internal;
            content_by_lua_block {
                ngx.say("hello, v2")
            }
        }

        #ab 测试统一接口
        location /ab {
            rewrite_by_lua_file /data/www/openresty/lualib/abtest/traffic_root.lua;
            log_by_lua_file /data/www/openresty/lualib/abtest/log.lua;
        }

        location /test_limit_conn {
            access_by_lua_file /usr/local/openresty/nginx/lualib/limit/access.lua;
            content_by_lua_file /usr/local/openresty/nginx/lualib/limit/content.lua;
            log_by_lua_file /usr/local/openresty/nginx/lualib/limit/log.lua;
        }

        location /test_limit_req {
            access_by_lua_file /usr/local/openresty/nginx/lualib/limit_req.lua;
            content_by_lua_file /usr/local/openresty/nginx/lualib/content.lua;
        }

        location /test_encode_args {
            content_by_lua_file /usr/local/openresty/nginx/lualib/encode_args.lua;
        }

		location /test_var {
			content_by_lua_file /usr/local/openresty/nginx/lualib/ngx_var.lua;
		}
		location /test_args {
			content_by_lua_file /usr/local/openresty/nginx/lualib/args.lua;
		}

		location /test_cjson {
		    content_by_lua_file /usr/local/openresty/nginx/lualib/cjson.lua;
		}

		location /content {
			content_by_lua_block {
				ngx.req.read_body()
				local args, err = ngx.req.get_uri_args()
				for k,v in pairs(args) do
					ngx.say(k, v)
				end
				local post_data,err = ngx.req.get_post_args()
				if not post_data then
					ngx.say("failed to get post args: ", err)
					ngx.eof()
				else
					for k,v in pairs(post_data) do
						ngx.say(k, v)
					end
				end
			}
		}

		location /json {
			content_by_lua_block {
				local t = {foo="bar",m=1,n=2}
				local cjson = require("cjson")
				local json = cjson.encode(t)
				local dj = cjson.decode(json)
				--ngx.say(json)
				for k,v in pairs(dj) do
					ngx.say(k," ", v)
				end
				--ngx.say(dj["foo"])
			}
		}

		location /redis {
			content_by_lua_block {
				local redis = require "resty.redis"
				local client = redis:new()
				local ok,err = client:connect("127.0.0.1",6379)
				if not ok then
					ngx.say("fail to connect: ", err)
					return
				end
				ok, err = client:set("dog", "animal")

				ngx.say(ok)
				local res, err = client:get("dog")
                if not res then
                    ngx.say("failed to get dog: ", err)
                    return
                end
				ngx.say(res)
			}
		}

		location /test_sub {
			content_by_lua_block {
				local uri_args = ngx.req.get_uri_args()
				local res = ngx.location.capture('/inter', {
					method=ngx.HTTP_GET,
					body="m=1&n=1",
					args={a=uri_args['a'],b=uri_args['b']}
				})
				ngx.say("status:", res.status)
				ngx.say("body:", res.body)
			}
		}

		location /inter {
			internal;
			content_by_lua_block {
				local a = ngx.req.get_uri_args()
				--ngx.say(a['a'])
				ngx.say(a['b'])
                ngx.req.read_body()
				local postd = ngx.req.get_post_args()
                --ngx.say(postd['m'])
				--ngx.say(ngx.req.get_body_data())
			}
		}

        #error_page  404              /404.html;

        # redirect server error pages to the static page /50x.html
        #
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }

        # proxy the PHP scripts to Apache listening on 127.0.0.1:80
        #
        #location ~ \.php$ {
        #    proxy_pass   http://127.0.0.1;
        #}

        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
        #
        #location ~ \.php$ {
        #    root           html;
        #    fastcgi_pass   127.0.0.1:9000;
        #    fastcgi_index  index.php;
        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
        #    include        fastcgi_params;
        #}

        # deny access to .htaccess files, if Apache's document root
        # concurs with nginx's one
        #
        #location ~ /\.ht {
        #    deny  all;
        #}
    }


    # another virtual host using mix of IP-, name-, and port-based configuration
    #
    #server {
    #    listen       8000;
    #    listen       somename:8080;
    #    server_name  somename  alias  another.alias;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}


    # HTTPS server
    #
    #server {
    #    listen       443 ssl;
    #    server_name  localhost;

    #    ssl_certificate      cert.pem;
    #    ssl_certificate_key  cert.key;

    #    ssl_session_cache    shared:SSL:1m;
    #    ssl_session_timeout  5m;

    #    ssl_ciphers  HIGH:!aNULL:!MD5;
    #    ssl_prefer_server_ciphers  on;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}

}